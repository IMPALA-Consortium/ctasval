[{"path":"https://impala-consortium.github.io/ctasval/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ctasval authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"comparing-different-approaches-for-introducing-autocorrelation-to-clinical-measurements","dir":"Articles","previous_headings":"","what":"Comparing Different Approaches for Introducing Autocorrelation to Clinical Measurements","title":"autocorr","text":"anomaly_autocorr uses sinus function anomaly_autocorr2 always adds fraction lag value current value","code":"set.seed(123) df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%  filter(parameter_id == \"Alkaline Phosphatase\")  # with this wrapper functions will always generate an anomalous site with the same patients set_seed <- function(fun, seed = 1){   fun_seeded <- function(...) {     set.seed(seed)     fun(...)   } }   plot_anomaly <- function(df, fun, anomaly_degree, seed) {   fun_seeded <- set_seed(fun, seed)   df_anomaly <- fun_seeded(df, anomaly_degree = anomaly_degree)      ggplot(df, aes(x = timepoint_rank, y = result, group = subject_id)) +     geom_line(color = \"black\") +     geom_line(data = df_anomaly, color = \"tomato\") +     coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank))) }  plot_anomaly(df_filt, anomaly_autocorr, anomaly_degree = 0.7, seed = 3) plot_anomaly(df_filt, anomaly_autocorr2, anomaly_degree = 0.7, seed = 3)"},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"compare-autocorrelation-values","dir":"Articles","previous_headings":"","what":"Compare Autocorrelation Values","title":"autocorr","text":"","code":"get_autocorr <- function(df, fun, anomaly_degree) {   fun_seeded <- set_seed(fun)   df_anomaly <- fun_seeded(df, anomaly_degree = anomaly_degree)      df_anomaly %>%     filter(! is.na(result)) %>%     summarise(       autocorr = ctas:::calculate_autocorrelation(result),       n = n(),       .by = subject_id     ) %>%     mutate(       autocorr = ifelse(n <= 2, 0, autocorr)     ) }  get_autocorr(df_filt, anomaly_autocorr, anomaly_degree = 0.7) #> # A tibble: 3 × 3 #>   subject_id              autocorr     n #>   <chr>                      <dbl> <int> #> 1 sample_site-01-708-1272    0.847     5 #> 2 sample_site-01-709-1424    0         2 #> 3 sample_site-01-716-1308    0.977     4 df_grid <- tibble(     anomaly_degree = list(seq(0, 1, 0.1)),     fun = list(anomaly_autocorr, anomaly_autocorr2),     fun_name = c(\"anomaly_autocorr\", \"anomaly_autocorr2\")   ) %>%   unnest(anomaly_degree)  df_autocorr <- df_grid %>%   mutate(     autocorr = purrr::map2(fun, anomaly_degree, ~ get_autocorr(df_filt, .x, .y))   ) %>%   unnest(autocorr) df_autocorr %>%   ggplot(aes(as.factor(anomaly_degree), autocorr, fill = fun_name)) +   geom_boxplot() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"autocorrelation-of-a-sinus-function-considering-lag-1-to-9","dir":"Articles","previous_headings":"Autocorrelation of a Sinus Function","what":"Autocorrelation of a Sinus Function considering lag 1 to 9","title":"autocorr","text":"","code":"acf(sin(seq(1:10)))"},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"autocorrelation-of-a-random-patient-for-alkaline-phosphatase-measurements-considering-lag-1-to-9","dir":"Articles","previous_headings":"Autocorrelation of a Sinus Function","what":"Autocorrelation of a random patient for Alkaline Phosphatase measurements considering lag 1 to 9","title":"autocorr","text":"","code":"df_filt %>%   filter(dense_rank(subject_id) == 1) %>%   pull(result) %>%   acf"},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"autocorrelation-of-a-random-patient-for-alkaline-phosphatase-measurements-considering-lag-1-to-9-1","dir":"Articles","previous_headings":"Autocorrelation of a Sinus Function","what":"Autocorrelation of a random patient for Alkaline Phosphatase measurements considering lag 1 to 9","title":"autocorr","text":"","code":"fun <- set_seed(anomaly_autocorr, seed = 10) fun(df_filt, anomaly_degree = 10) %>%   filter(dense_rank(subject_id) == 1) %>%   pull(result) %>%   acf"},{"path":"https://impala-consortium.github.io/ctasval/articles/autocorr.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"autocorr","text":"anomaly_autocorr2 adds fraction previous values increases autocorrelation anomaly_autocorr uses sinus function. ctas:::calculate_autocorrelation uses lag 1. Even considering lags sinus function increase autocorrelation ~ 0.6","code":""},{"path":"https://impala-consortium.github.io/ctasval/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Björn Koneswarakantha. Author, maintainer. Pekka Tiikkainen. Author. Frederik Colin. Author. IMPALA. Copyright holder.","code":""},{"path":"https://impala-consortium.github.io/ctasval/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Koneswarakantha B, Tiikkainen P, Colin F (2025). ctasval: Validate ctas. R package version 0.0.5, https://impala-consortium.github.io/ctasval.","code":"@Manual{,   title = {ctasval: Validate ctas},   author = {Björn Koneswarakantha and Pekka Tiikkainen and Frederik Colin},   year = {2025},   note = {R package version 0.0.5},   url = {https://impala-consortium.github.io/ctasval}, }"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"ctasval","dir":"","previous_headings":"","what":"Validate ctas","title":"Validate ctas","text":"goal ctasval provide structured code validate {ctas} performance study data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Validate ctas","text":"can install development version ctasval GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"IMPALA-Consortium/ctas\") devtools::install_github(\"IMPALA-Consortium/ctasval\")"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"ctasval-1","dir":"","previous_headings":"","what":"ctasval","title":"Validate ctas","text":"ctasval adds three anomalous sites data set iteration tries detect using {ctas}. samples study site pool first determine number patients samples sufficient number patients study patient pool.","code":"library(pharmaversesdtm) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(future) library(ctasval) library(ggplot2) library(tidyr)    set.seed(1)  df_prep <- prep_sdtm(   lb = pharmaversesdtm::lb,   vs = pharmaversesdtm::vs,   dm = pharmaversesdtm::dm,   scramble = TRUE )  df_filt <- df_prep %>%   filter(parameter_id %in% c(\"Pulse Rate\", \"Alanine Aminotransferase\")) %>%   filter(! grepl(\"UNSCH\", timepoint_1_name) & !timepoint_1_name %in% c(\"AMBUL ECG REMOVAL\", \"RETRIEVAL\"))  plan(multisession, workers = 6)  ctas <- ctasval(   df = df_filt,   fun_anomaly = c(     anomaly_average,     anomaly_sd,     anomaly_autocorr2,     anomaly_lof,     anomaly_range,     anomaly_unique_value_count_relative   ),   feats = c(\"average\", \"sd\", \"autocorr\", \"lof\", \"range\", \"unique_value_count_relative\"),   parallel = TRUE,   iter = 50,   n_sites = 3,   anomaly_degree = c(0, 0.25, 0.5, 0.75, 1, 5, 10),   thresh = 1.3,   site_scoring_method = \"ks\" ) #> Warning: There were 350 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ctas = simaerep::purrr_bar(...)`. #> Caused by warning: #> ! There were 11 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ts_features = list(...)`. #> ℹ In row 2. #> Caused by warning in `cor()`: #> ! the standard deviation is zero #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 10 remaining warnings. #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 349 remaining warnings.  plan(sequential)  ctas #> $result #> # A tibble: 84 × 9 #>    anomaly_degree feats    parameter_id       TN    FN    FP    TP     tpr   fpr #>             <dbl> <chr>    <chr>           <int> <int> <int> <int>   <dbl> <dbl> #>  1              0 average  Alanine Aminot…   800   150     0     0 0           0 #>  2              0 average  Pulse Rate        800   150     0     0 0           0 #>  3              0 sd       Alanine Aminot…   800   150     0     0 0           0 #>  4              0 sd       Pulse Rate        800   150     0     0 0           0 #>  5              0 autocorr Alanine Aminot…   800   150     0     0 0           0 #>  6              0 autocorr Pulse Rate        800   150     0     0 0           0 #>  7              0 lof      Alanine Aminot…   800   150     0     0 0           0 #>  8              0 lof      Pulse Rate        800   149     0     1 0.00667     0 #>  9              0 range    Alanine Aminot…   800   150     0     0 0           0 #> 10              0 range    Pulse Rate        800   150     0     0 0           0 #> # ℹ 74 more rows #>  #> $anomaly #> # A tibble: 3,623,201 × 17 #>     iter anomaly_degree fun_anomaly feats   subject_id    site  timepoint_1_name #>    <int>          <dbl> <list>      <chr>   <chr>         <chr> <chr>            #>  1     1              0 <fn>        average sample_site1… samp… SCREENING 1      #>  2     1              0 <fn>        average sample_site1… samp… WEEK 2           #>  3     1              0 <fn>        average sample_site1… samp… WEEK 4           #>  4     1              0 <fn>        average sample_site1… samp… WEEK 6           #>  5     1              0 <fn>        average sample_site1… samp… WEEK 8           #>  6     1              0 <fn>        average sample_site1… samp… WEEK 12          #>  7     1              0 <fn>        average sample_site1… samp… WEEK 16          #>  8     1              0 <fn>        average sample_site1… samp… WEEK 20          #>  9     1              0 <fn>        average sample_site1… samp… WEEK 24          #> 10     1              0 <fn>        average sample_site1… samp… WEEK 26          #> # ℹ 3,623,191 more rows #> # ℹ 10 more variables: timepoint_2_name <chr>, timepoint_rank <dbl>, #> #   parameter_id <chr>, parameter_name <chr>, parameter_category_1 <chr>, #> #   baseline <lgl>, result <dbl>, method <chr>, score <dbl>, is_signal <dbl> #>  #> attr(,\"class\") #> [1] \"ctasval_aggregated\""},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"performance-metrics","dir":"","previous_headings":"ctasval","what":"Performance Metrics","title":"Validate ctas","text":"","code":"ctas$result %>%   tidyr::pivot_longer(c(tpr, fpr), values_to = \"metric\", names_to = \"metric_type\") %>%   ggplot(aes(log(anomaly_degree),  metric)) +   geom_line(aes(linetype = metric_type)) +   geom_point() +   facet_grid(parameter_id ~ feats) +   theme(legend.position = \"bottom\")"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"mixed-effect-scoring","dir":"","previous_headings":"ctasval","what":"Mixed Effect Scoring","title":"Validate ctas","text":"","code":"plan(multisession, workers = 6)  ctas <- ctasval(   df = df_filt,   fun_anomaly = c(     anomaly_average,     anomaly_sd,     anomaly_autocorr,     anomaly_lof,     anomaly_range,     anomaly_unique_value_count_relative   ),   feats = c(\"average\", \"sd\", \"autocorr\", \"lof\", \"range\", \"unique_value_count_relative\"),   parallel = TRUE,   iter = 50,   n_sites = 3,   anomaly_degree = c(0, 0.25, 0.5, 0.75, 1, 5, 10),   thresh = 1.3,   site_scoring_method = \"mixedeffects\" ) #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #> Warning: There were 353 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ctas = simaerep::purrr_bar(...)`. #> Caused by warning: #> ! There were 9 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ts_features = list(...)`. #> ℹ In row 2. #> Caused by warning in `cor()`: #> ! the standard deviation is zero #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 8 remaining warnings. #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 352 remaining warnings.  plan(sequential)  ctas$result %>%   tidyr::pivot_longer(c(tpr, fpr), values_to = \"metric\", names_to = \"metric_type\") %>%   ggplot(aes(log(anomaly_degree),  metric)) +   geom_line(aes(linetype = metric_type)) +   geom_point() +   facet_grid(parameter_id ~ feats) +   theme(legend.position = \"bottom\")"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"average-box-plot-scoring","dir":"","previous_headings":"ctasval","what":"Average Box Plot Scoring","title":"Validate ctas","text":"","code":"plan(multisession, workers = 6)  ctas <- ctasval(   df = df_filt,   fun_anomaly = c(     anomaly_average,     anomaly_sd,     anomaly_autocorr,     anomaly_lof,     anomaly_range,     anomaly_unique_value_count_relative   ),   feats = c(\"average\", \"sd\", \"autocorr\", \"lof\", \"range\", \"unique_value_count_relative\"),   parallel = TRUE,   iter = 50,   n_sites = 3,   anomaly_degree = c(0, 0.25, 0.5, 0.75, 1, 5, 10),   site_scoring_method = \"avg_feat_value\" ) #> Warning: There were 350 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ctas = simaerep::purrr_bar(...)`. #> Caused by warning: #> ! There were 5 warnings in `mutate()`. #> The first warning was: #> ℹ In argument: `ts_features = list(...)`. #> ℹ In row 2. #> Caused by warning in `cor()`: #> ! the standard deviation is zero #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 4 remaining warnings. #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 349 remaining warnings.  plan(sequential)  ctas$result %>%   tidyr::pivot_longer(c(tpr, fpr), values_to = \"metric\", names_to = \"metric_type\") %>%   ggplot(aes(log(anomaly_degree),  metric)) +   geom_line(aes(linetype = metric_type)) +   geom_point() +   facet_grid(parameter_id ~ feats) +   theme(legend.position = \"bottom\")"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"anamolous-sites","dir":"","previous_headings":"ctasval","what":"Anamolous Sites","title":"Validate ctas","text":"Anomalous Sites scores can reviewed.","code":"ctas$anomaly %>%   select(     iter,     anomaly_degree,     feats,     parameter_id,     site,     subject_id,     timepoint_rank,     result,     score   ) %>%   arrange(iter, desc(anomaly_degree), parameter_id, feats, site, subject_id, timepoint_rank) %>%   head(50) %>%   knitr::kable()"},{"path":"https://impala-consortium.github.io/ctasval/index.html","id":"publication","dir":"","previous_headings":"","what":"Publication","title":"Validate ctas","text":"commands render publication pub/ edit publication edit inst/pub/ctasvalidation.qmd","code":"quarto::quarto_render(\"inst/pub/ctasvalidation.qmd\", output_format = \"html\") quarto::quarto_render(\"inst/pub/ctasvalidation.qmd\", output_format = \"docx\")"},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create site with anomalous patients — anomaly_average","title":"Create site with anomalous patients — anomaly_average","text":"Average","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create site with anomalous patients — anomaly_average","text":"","code":"anomaly_average(df, anomaly_degree, site = \"sample_site\")  anomaly_sd(df, anomaly_degree, site = \"sample_site\")  anomaly_autocorr(df, anomaly_degree, site = \"sample_site\")  anomaly_autocorr2(df, anomaly_degree, site = \"sample_site\")  anomaly_lof(df, anomaly_degree, site = \"sample_site\", verbose = FALSE)  anomaly_range(df, anomaly_degree, site = \"sample_site\")  anomaly_unique_value_count_relative(df, anomaly_degree, site = \"sample_site\")"},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create site with anomalous patients — anomaly_average","text":"df Data frame containing study data. anomaly_degree Degree anomaly add. site prefix new sites, Default \"sample_site\". verbose logical, Default: FALSE","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create site with anomalous patients — anomaly_average","text":"data frame added anomalies.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create site with anomalous patients — anomaly_average","text":"add fractions lag result. fraction determined anomaly_degree.","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/reference/anomaly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create site with anomalous patients — anomaly_average","text":"","code":"set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_average(df_filt, anomaly_degree = 2, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))   set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_sd(df_filt, anomaly_degree = 2, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))   set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_autocorr(df_filt, anomaly_degree = 2, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))   set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_autocorr2(df_filt, anomaly_degree = 1, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))   set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_lof(df_filt, anomaly_degree = 2, site = \"anomolous\", verbose = TRUE) #> Selected distribution: runif  #> Parameters: min = 1.7847; max = 9.6711  #> Selected distribution: rpois  #> Parameters: lambda = 1.3228  #> Selected distribution: rgamma  #> Parameters: shape = 8.7425; scale = 1.9169  #> Selected distribution: rpois  #> Parameters: lambda = 7.688  #> Selected distribution: rpois  #> Parameters: lambda = 1.312  #> Selected distribution: rpois  #> Parameters: lambda = 1.6909  #> Selected distribution: rexp  #> Parameters: rate = 1.8951  #> Selected distribution: rexp  #> Parameters: rate = 0.3266  #> Selected distribution: rgamma  #> Parameters: shape = 1.9628; scale = 0.5289  #> Selected distribution: rbinom  #> Parameters: size = 43; prob = 0.9261  #> Selected distribution: rpois  #> Parameters: lambda = 7.7639  #> Selected distribution: rpois  #> Parameters: lambda = 2.8724  #> Selected distribution: rexp  #> Parameters: rate = 1.3202  #> Selected distribution: rbeta  #> Parameters: shape1 = 1.0197; shape2 = 2.4954  #> Selected distribution: runif  #> Parameters: min = 4.9997; max = 7.6387  #> Selected distribution: runif  #> Parameters: min = 2.654; max = 7.685  #> Selected distribution: rgamma  #> Parameters: shape = 6.579; scale = 1.8946  #> Selected distribution: rpois  #> Parameters: lambda = 3.3932  #> Selected distribution: rgamma  #> Parameters: shape = 1.7505; scale = 1.5516  #> Selected distribution: rbeta  #> Parameters: shape1 = 0.6712; shape2 = 4.6334  #> Selected distribution: rbeta  #> Parameters: shape1 = 0.2613; shape2 = 3.5113  #> Selected distribution: rpois  #> Parameters: lambda = 9.4547   ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))    set.seed(7) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_range(df_filt, anomaly_degree = 2, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))   set.seed(1) library(ggplot2)  df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  df_anomaly <- anomaly_unique_value_count_relative(df_filt, anomaly_degree = 2, site = \"anomolous\")  ggplot(df_filt, aes(x = timepoint_rank, y = result, group = subject_id)) + geom_line(color = \"black\") + geom_line(data = df_anomaly, color = \"tomato\") + coord_cartesian(xlim = c(0, max(df_anomaly$timepoint_rank)))"},{"path":"https://impala-consortium.github.io/ctasval/reference/ctasval.html","id":null,"dir":"Reference","previous_headings":"","what":"CTAS Validation — ctasval","title":"CTAS Validation — ctasval","text":"function performs CTAS validation generating anomalies, calculating scores, summarizing performance metrics.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/ctasval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CTAS Validation — ctasval","text":"","code":"ctasval(   df,   fun_anomaly,   feats,   anomaly_degree = c(0, 0.5, 1, 5, 10, 50),   thresh = 1,   iter = 100,   n_sites = 3,   parallel = FALSE,   progress = TRUE,   default_minimum_timepoints_per_series = 3,   default_minimum_subjects_per_series = 3,   default_max_share_missing_timepoints_per_series = 0.5,   default_generate_change_from_baseline = FALSE,   autogenerate_timeseries = TRUE,   site_scoring_method = \"ks\" )"},{"path":"https://impala-consortium.github.io/ctasval/reference/ctasval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CTAS Validation — ctasval","text":"df Data frame containing study data. fun_anomaly List functions apply generate anomalies. feats List features calculate timeseries. anomaly_degree Vector anomaly degrees add. Default c(0, 0.5, 1, 5, 10, 50). thresh Threshold classification. Default 1.0. iter Number iterations run. Default 100. n_sites Number sites generate. Default 3. parallel Logical indicating whether run parallel. Default FALSE. progress Logical indicating whether show progress. Default TRUE. default_minimum_timepoints_per_series Minimum timepoints per series. Default 3. default_minimum_subjects_per_series Minimum subjects per series. Default 3. default_max_share_missing_timepoints_per_series Maximum share missing timepoints per series. Default 0.5. default_generate_change_from_baseline Logical indicating whether generate change baseline. Default FALSE. autogenerate_timeseries Logical indicating whether auto-generate timeseries. Default TRUE. site_scoring_method site_scoring_method score sites (\"ks\" = Kolmogorov-Smirnov, \"mixedeffects\" = mixed effects modelling, \"avg_feat_value\" = Average site feature value. Default:ks","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/ctasval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CTAS Validation — ctasval","text":"list containing performance metrics anomaly data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/ctasval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CTAS Validation — ctasval","text":"","code":"df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)  df_filt <- df_prep %>%   filter(parameter_id == \"Alkaline Phosphatase\")  ctas <- ctasval(   df = df_filt,   fun_anomaly = c(anomaly_average, anomaly_sd),   feats = c(\"average\", \"sd\"),   parallel = FALSE,   iter = 1 )  ctas #> $result #> # A tibble: 12 × 9 #>    anomaly_degree feats   parameter_id          TN    FN    FP    TP   tpr   fpr #>             <dbl> <chr>   <chr>              <int> <int> <int> <int> <dbl> <dbl> #>  1            0   average Alkaline Phosphat…    17     3     0     0 0         0 #>  2            0   sd      Alkaline Phosphat…    17     3     0     0 0         0 #>  3            0.5 average Alkaline Phosphat…    17     3     0     0 0         0 #>  4            0.5 sd      Alkaline Phosphat…    17     3     0     0 0         0 #>  5            1   average Alkaline Phosphat…    17     3     0     0 0         0 #>  6            1   sd      Alkaline Phosphat…    17     3     0     0 0         0 #>  7            5   average Alkaline Phosphat…    17     3     0     0 0         0 #>  8            5   sd      Alkaline Phosphat…    17     3     0     0 0         0 #>  9           10   average Alkaline Phosphat…    17     2     0     1 0.333     0 #> 10           10   sd      Alkaline Phosphat…    17     3     0     0 0         0 #> 11           50   average Alkaline Phosphat…    17     3     0     0 0         0 #> 12           50   sd      Alkaline Phosphat…    17     2     0     1 0.333     0 #>  #> $anomaly #> # A tibble: 3,358 × 39 #>     iter anomaly_degree fun_anomaly feats   STUDYID      DOMAIN subject_id LBSEQ #>    <int>          <dbl> <list>      <chr>   <chr>        <chr>  <chr>      <dbl> #>  1     1              0 <fn>        average CDISCPILOT01 LB     sample_si…     2 #>  2     1              0 <fn>        average CDISCPILOT01 LB     sample_si…    39 #>  3     1              0 <fn>        average CDISCPILOT01 LB     sample_si…    74 #>  4     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   104 #>  5     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   134 #>  6     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   164 #>  7     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   199 #>  8     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   229 #>  9     1              0 <fn>        average CDISCPILOT01 LB     sample_si…   259 #> 10     1              0 <fn>        average CDISCPILOT01 LB     sample_si…     2 #> # ℹ 3,348 more rows #> # ℹ 31 more variables: LBTESTCD <chr>, LBTEST <chr>, LBCAT <chr>, #> #   LBORRES <chr>, LBORRESU <chr>, LBORNRLO <chr>, LBORNRHI <chr>, #> #   LBSTRESC <chr>, LBSTRESN <dbl>, LBSTRESU <chr>, LBSTNRLO <dbl>, #> #   LBSTNRHI <dbl>, LBNRIND <chr>, LBBLFL <chr>, VISITNUM <dbl>, VISIT <chr>, #> #   VISITDY <dbl>, LBDTC <chr>, LBDY <dbl>, timepoint_rank <dbl>, #> #   timepoint_1_name <chr>, result <dbl>, parameter_id <chr>, … #>  #> attr(,\"class\") #> [1] \"ctasval_aggregated\""},{"path":"https://impala-consortium.github.io/ctasval/reference/cumsum_fraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a fraction of lag to vector — cumsum_fraction","title":"Add a fraction of lag to vector — cumsum_fraction","text":"Add fraction lag vector","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/cumsum_fraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a fraction of lag to vector — cumsum_fraction","text":"","code":"cumsum_fraction(x, fraction)"},{"path":"https://impala-consortium.github.io/ctasval/reference/cumsum_fraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a fraction of lag to vector — cumsum_fraction","text":"","code":"if (FALSE) { # \\dontrun{ cumsum_fraction(rnorm(10), 0.5) cumsum_fraction(rnorm(1), 0.1) } # }"},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Anomaly Data — get_anomaly_data","title":"Generate Anomaly Data — get_anomaly_data","text":"function generates anomaly data applying specified anomaly function data frame.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Anomaly Data — get_anomaly_data","text":"","code":"get_anomaly_data(   df,   n_sites,   fun_anomaly,   anomaly_degree,   site_prefix = \"site\" )"},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Anomaly Data — get_anomaly_data","text":"df Data frame containing study data. n_sites Number sites generate. fun_anomaly Function apply generate anomalies. anomaly_degree Degree anomaly add. site_prefix Prefix site names. Default \"site\".","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Anomaly Data — get_anomaly_data","text":"data frame generated anomaly data.","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_scores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Anomaly Scores — get_anomaly_scores","title":"Get Anomaly Scores — get_anomaly_scores","text":"function calculates scores anomalies data frame.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_scores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Anomaly Scores — get_anomaly_scores","text":"","code":"get_anomaly_scores(   df,   n_sites,   fun_anomaly,   anomaly_degree,   feats,   thresh = NULL,   default_minimum_timepoints_per_series = 3,   default_minimum_subjects_per_series = 3,   default_max_share_missing_timepoints_per_series = 0.5,   default_generate_change_from_baseline = FALSE,   autogenerate_timeseries = TRUE,   site_scoring_method )"},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_scores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Anomaly Scores — get_anomaly_scores","text":"df Data frame containing study data. n_sites Number sites generate. fun_anomaly Function apply generate anomalies. anomaly_degree Degree anomaly add. feats Features calculate timeseries. thresh Threshold classification. Default NULL. default_minimum_timepoints_per_series Minimum timepoints per series. Default 3. default_minimum_subjects_per_series Minimum subjects per series. Default 3. default_max_share_missing_timepoints_per_series Maximum share missing timepoints per series. Default 0.5. default_generate_change_from_baseline Logical indicating whether generate change baseline. Default FALSE. autogenerate_timeseries Logical indicating whether auto-generate timeseries. Default TRUE. site_scoring_method score sites (\"ks\" = Kolmogorov-Smirnov, \"mixedeffects\" = mixed effects modelling, \"avg_feat_value\" = Average site feature value.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_anomaly_scores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Anomaly Scores — get_anomaly_scores","text":"data frame anomaly scores.","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/reference/get_ctas.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CTAS — get_ctas","title":"Get CTAS — get_ctas","text":"function processes study using CTAS (Clinical Trial Anomaly Spotter) providing various parameters features.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_ctas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CTAS — get_ctas","text":"","code":"get_ctas(   df,   feats,   default_minimum_timepoints_per_series = 3,   default_minimum_subjects_per_series = 3,   default_max_share_missing_timepoints_per_series = 0.5,   default_generate_change_from_baseline = FALSE,   autogenerate_timeseries = TRUE,   site_scoring_method )"},{"path":"https://impala-consortium.github.io/ctasval/reference/get_ctas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CTAS — get_ctas","text":"df Data frame containing study data. feats Features calculate timeseries. default_minimum_timepoints_per_series Minimum timepoints per series. Default 3. default_minimum_subjects_per_series Minimum subjects per series. Default 3. default_max_share_missing_timepoints_per_series Maximum share missing timepoints per series. Default 0.5. default_generate_change_from_baseline Logical indicating whether generate change baseline. Default FALSE. autogenerate_timeseries Logical indicating whether auto-generate timeseries. Default TRUE.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/get_ctas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CTAS — get_ctas","text":"data frame CTAS results.","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SDTM Data — prep_sdtm","title":"Prepare SDTM Data — prep_sdtm","text":"Prepare SDTM Data","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SDTM Data — prep_sdtm","text":"","code":"prep_sdtm(lb, vs, dm, scramble = TRUE)"},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SDTM Data — prep_sdtm","text":"lb Data frame containing LB data. vs Data frame containing VS data. dm Data frame containing DM data. scramble Logical indicating whether scramble SITEID DM data. Default TRUE.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_lb.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SDTM LB Data — prep_sdtm_lb","title":"Prepare SDTM LB Data — prep_sdtm_lb","text":"function prepares LB (Laboratory) data SDTM (Study Data Tabulation Model) merging DM (Demographics) data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_lb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SDTM LB Data — prep_sdtm_lb","text":"","code":"prep_sdtm_lb(lb, dm, scramble = TRUE)"},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_lb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SDTM LB Data — prep_sdtm_lb","text":"lb Data frame containing LB data. dm Data frame containing DM data. scramble Logical indicating whether scramble SITEID DM data. Default TRUE.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_lb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare SDTM LB Data — prep_sdtm_lb","text":"data frame prepared SDTM LB data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare SDTM VS Data — prep_sdtm_vs","title":"Prepare SDTM VS Data — prep_sdtm_vs","text":"function prepares VS (Vital Sign) data SDTM (Study Data Tabulation Model) merging DM (Demographics) data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare SDTM VS Data — prep_sdtm_vs","text":"","code":"prep_sdtm_vs(vs, dm, scramble = TRUE)"},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare SDTM VS Data — prep_sdtm_vs","text":"vs Data frame containing VS data. dm Data frame containing DM data. scramble Logical indicating whether scramble SITEID DM data. Default TRUE.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/prep_sdtm_vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare SDTM VS Data — prep_sdtm_vs","text":"data frame prepared SDTM LB data.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/rsurprise.html","id":null,"dir":"Reference","previous_headings":"","what":"sample values from a randomly selected non-normal distribution — rsurprise","title":"sample values from a randomly selected non-normal distribution — rsurprise","text":"sample values randomly selected non-normal distribution","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/rsurprise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sample values from a randomly selected non-normal distribution — rsurprise","text":"","code":"rsurprise(n, verbose = FALSE)"},{"path":"https://impala-consortium.github.io/ctasval/reference/rsurprise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sample values from a randomly selected non-normal distribution — rsurprise","text":"n integer, number values verbose logical, Default: FALSE","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/rsurprise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sample values from a randomly selected non-normal distribution — rsurprise","text":"","code":"set.seed(1) rsurprise(5, verbose = TRUE) #> Selected distribution: rbinom  #> Parameters: size = 68; prob = 0.5729  #> [1] 34 42 34 32 37 rsurprise(5, verbose = TRUE) #> Selected distribution: rbeta  #> Parameters: shape1 = 0.4028; shape2 = 1.1093  #> [1] 5.397180e-01 2.708550e-01 2.370827e-06 5.344772e-01 6.524672e-01"},{"path":"https://impala-consortium.github.io/ctasval/reference/sample_site.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Site Data — sample_site","title":"Sample Site Data — sample_site","text":"function samples one random site per parameter given data frame.","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/sample_site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Site Data — sample_site","text":"","code":"sample_site(df, site = \"sample_site\")"},{"path":"https://impala-consortium.github.io/ctasval/reference/sample_site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Site Data — sample_site","text":"df Data frame containing study data. site site sample . Default \"sample_site\".","code":""},{"path":"https://impala-consortium.github.io/ctasval/reference/sample_site.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Site Data — sample_site","text":"data frame sampled site data.","code":""},{"path":[]},{"path":"https://impala-consortium.github.io/ctasval/news/index.html","id":"ctasval-v004","dir":"Changelog","previous_headings":"","what":"ctasval v0.0.4","title":"ctasval v0.0.4","text":"fix https://github.com/IMPALA-Consortium/ctasval/issues/21","code":""},{"path":"https://impala-consortium.github.io/ctasval/news/index.html","id":"ctasval-v003","dir":"Changelog","previous_headings":"","what":"ctasval v0.0.3","title":"ctasval v0.0.3","text":"fix avg_feat_value continue publication draft","code":""},{"path":"https://impala-consortium.github.io/ctasval/news/index.html","id":"ctasval-v002","dir":"Changelog","previous_headings":"","what":"ctasval v0.0.2","title":"ctasval v0.0.2","text":"adapt ctas site_scoring methods add publication draft","code":""}]
