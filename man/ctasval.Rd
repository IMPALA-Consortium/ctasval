% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctasval.R
\name{ctasval}
\alias{ctasval}
\title{CTAS Validation}
\usage{
ctasval(
  df,
  fun_anomaly,
  feats,
  anomaly_degree = c(0, 0.5, 1, 5, 10, 50),
  thresh = 1,
  iter = 100,
  n_sites = 3,
  parallel = FALSE,
  progress = TRUE,
  default_minimum_timepoints_per_series = 3,
  default_minimum_subjects_per_series = 3,
  default_max_share_missing_timepoints_per_series = 0.5,
  default_generate_change_from_baseline = FALSE,
  autogenerate_timeseries = TRUE
)
}
\arguments{
\item{df}{Data frame containing the study data.}

\item{fun_anomaly}{List of functions to apply to generate anomalies.}

\item{feats}{List of features to calculate for the timeseries.}

\item{anomaly_degree}{Vector of anomaly degrees to add. Default is c(0, 0.5, 1, 5, 10, 50).}

\item{thresh}{Threshold for classification. Default is 1.0.}

\item{iter}{Number of iterations to run. Default is 100.}

\item{n_sites}{Number of sites to generate. Default is 3.}

\item{parallel}{Logical indicating whether to run in parallel. Default is FALSE.}

\item{progress}{Logical indicating whether to show progress. Default is TRUE.}

\item{default_minimum_timepoints_per_series}{Minimum timepoints per series. Default is 3.}

\item{default_minimum_subjects_per_series}{Minimum subjects per series. Default is 3.}

\item{default_max_share_missing_timepoints_per_series}{Maximum share of missing timepoints per series. Default is 0.5.}

\item{default_generate_change_from_baseline}{Logical indicating whether to generate change from baseline. Default is FALSE.}

\item{autogenerate_timeseries}{Logical indicating whether to auto-generate timeseries. Default is TRUE.}
}
\value{
A list containing the performance metrics and anomaly data.
}
\description{
This function performs CTAS validation by generating anomalies, calculating scores, and summarizing performance metrics.
}
\examples{
df_prep <- prep_sdtm_lb(pharmaversesdtm::lb, pharmaversesdtm::dm, scramble = TRUE)

df_filt <- df_prep \%>\%
  filter(parameter_id == "Alkaline Phosphatase")

ctas <- ctasval(
  df = df_filt,
  fun_anomaly = c(anomaly_average, anomaly_sd),
  feats = c("average", "sd"),
  parallel = FALSE,
  iter = 1
)

ctas

}
